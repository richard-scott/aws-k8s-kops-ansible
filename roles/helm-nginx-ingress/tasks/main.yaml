---
################################
# Install Nginx-Ingress via Helm
################################

- name: Adjust Proxy Protocol String
  set_fact:
    use_proxy_protocol_string: ""
  when: not use_proxy_protocol

- name: Creating ConfigMap for the controller
  shell: |
    cat <<EOF | kubectl create -f -
    {{ lookup( 'template', 'configmap.yaml.j2') | trim }}
    EOF
  args:
    executable: /bin/bash

- block:
    - name: "Checking SSL for {{ ssl_cert_fqdn }}"
      aws_acm_info:
        domain_name: "{{ ssl_cert_fqdn }}"
        region: "{{ aws_region }}"
        statuses: ISSUED
      register: acm

    - name: Extract Certificate ARN
      set_fact:
        certificate_arn: "{{ acm.certificates[0].certificate_arn }}"

    - debug:
        var: certificate_arn

    - fail:
      when: not certificate_arn | length >= 0

  when: not certificate_arn | length >= 0

- name: Create ARN setting
  set_fact:
    certificate_arn_string:
      '--set controller.service.annotations."{{ "service.beta.kubernetes.io/aws-load-balancer-ssl-cert" | regex_escape() }}={{ certificate_arn | regex_escape()
      }}"'
  when: use_ssl

- name: "Adding Nginx-Ingress via Helm"
  shell: >-
    helm install --atomic --dep-up stable/nginx-ingress
    --name nginx-ingress-{{ k8s_namespace }}
    --namespace {{ k8s_namespace }}
    --set controller.metrics.enabled=true
    --set defaultBackend.enabled="{{ use_default_backend }}"
    --set controller.ingressClass="{{ k8s_namespace }}-nginx"
    --set controller.service.targetPorts.http="{{ target_ports_http }}"
    --set controller.service.targetPorts.https="{{ target_ports_https }}"
    --set controller.service.annotations."{{ "service.beta.kubernetes.io/aws-load-balancer-backend-protocol" | regex_escape() }}={{ backend_protocol }}"
    --set controller.service.annotations."{{ "service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled" | regex_escape() }}={{ "true" | regex_escape() }}"
    --set controller.service.annotations."{{ "service.beta.kubernetes.io/aws-load-balancer-proxy-protocol" | regex_escape() }}={{ "*" | regex_escape() }}"
    --set controller.service.annotations."{{ "service.beta.kubernetes.io/aws-load-balancer-type" | regex_escape() }}={{ elb_type }}"
    --set controller.service.annotations."{{ "service.beta.kubernetes.io/aws-load-balancer-ssl-ports" | regex_escape() }}={{ ssl_ports }}"
    {{ certificate_arn_string }}
  args:
    executable: /bin/bash

- name: Wait for the Controller to be deployed.
  shell: >
    kubectl get svc nginx-ingress-{{ k8s_namespace }}-controller -n {{ k8s_namespace }} -o jsonpath="{.status.loadBalancer.ingress[0].hostname}"
  args:
    executable: /bin/bash
  ignore_errors: true
  register: cmd_result
  until: cmd_result.rc == 0
  retries: 30
  delay: 60

- set_fact:
    elb_fqdn: "{{ cmd_result.stdout }}"

- action:
    module: ec2_elb_info
  register: elb_info

- set_fact:
    elb_hosted_zone_id: "{{ elb_info | json_query(query) | join }}"
  vars:
    query: "elbs[?dns_name=='{{ elb_fqdn }}'].hosted_zone_id"

- block:
    - action:
        module: elb_application_lb_facts
      register: elb_facts

    - set_fact:
        elb_hosted_zone_id: "{{ elb_facts | json_query(query) | join }}"
      vars:
        query: "load_balancers[?dns_name=='{{ elb_fqdn }}'].canonical_hosted_zone_id"

  when: elb_hosted_zone_id | length | int == 0

- debug:
    var: elb_hosted_zone_id

- fail:
  when: elb_hosted_zone_id | length | int == 0

- name: "Adding {{ k8s_namespace }}.{{ dns_zone }} to route53"
  route53:
    state: present
    wait: yes
    zone: "{{ dns_zone }}"
    record: "{{ k8s_namespace }}.{{ dns_zone }}"
    type: A
    value: "{{ elb_fqdn }}"
    overwrite: yes
    alias: True
    alias_hosted_zone_id: "{{ elb_hosted_zone_id }}"

- name: "Waiting for DNS to update on '{{ k8s_namespace }}.{{ dns_zone }}'"
  shell: >
    dig +short {{ k8s_namespace }}.{{ dns_zone }} | egrep -v "^$"
  args:
    executable: /bin/bash
  register: cmd_result
  until: cmd_result.rc == 0
  retries: 30
  delay: 60

- block:
    - name: "Adding *.{{ k8s_namespace }}.{{ dns_zone }} to route53"
      route53:
        state: present
        wait: yes
        zone: "{{ dns_zone }}"
        record: "*.{{ k8s_namespace }}.{{ dns_zone }}"
        type: A
        value: "{{ elb_fqdn }}"
        overwrite: yes
        alias: True
        alias_hosted_zone_id: "{{ elb_hosted_zone_id }}"

    - name: "Waiting for DNS to update on '*.{{ k8s_namespace }}.{{ dns_zone }}'"
      shell: >
        dig +short {{ k8s_namespace }}.{{ dns_zone }} | egrep -v "^$"
      args:
        executable: /bin/bash
      register: cmd_result
      until: cmd_result.rc == 0
      retries: 30
      delay: 60

  when: dns_namespace_wildcard

- block:
    - name: "Adding *.{{ dns_zone }} to route53"
      route53:
        state: present
        wait: yes
        zone: "{{ dns_zone }}"
        record: "*.{{ dns_zone }}"
        type: A
        value: "{{ elb_fqdn }}"
        overwrite: yes
        alias: True
        alias_hosted_zone_id: "{{ elb_hosted_zone_id }}"

    - name: "Waiting for DNS to update on '*.{{ dns_zone }}'"
      shell: >
        dig +short waiting.{{ dns_zone }} | egrep -v "^$"
      args:
        executable: /bin/bash
      register: cmd_result
      until: cmd_result.rc == 0
      retries: 30
      delay: 60

  when: dns_zone_wildcard

- import_role:
    name: hello-kubernetes
  when: not use_default_backend and use_hello_kubernetes_backend
