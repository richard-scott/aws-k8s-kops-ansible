---

#####################################
# Install Cluster Autoscaler via Helm
#####################################

- name: "Update role/nodes.{{ cluster_name }}.{{ dns_zone }}"
  iam_policy:
    iam_type: role
    iam_name: "nodes.{{ cluster_name }}.{{ dns_zone }}"
    policy_name: "ec2ClusterAutoscale"
    state: present
    policy_json: "{{ lookup( 'template', 'cluster-overprovisioner.json.j2') }}"

- name: Wait for policy to be applied.
  iam_role_info:
    name: "nodes.{{ cluster_name }}.{{ dns_zone }}"
  register: result
  until: result.iam_roles[0].inline_policies | length > 1
  retries: 30
  delay: 60

- name: Set a default scale-down-unneeded-time value
  set_fact:
    scale_down_unneeded_time: "5m"
  when: scale_down_unneeded_time is undefined

- name: Check we have defined a Minimum ASG Node count
  set_fact:
    node_autoscaler_min: 1
  when: node_autoscaler_min is not defined 

- name: "See how many instances are pending/running in {{ aws_region }}"
  ec2_instance_info:
    region: "{{ aws_region }}"
    filters:
      instance-state-name: [ "pending", "running" ]
  register: eif

- name: Adjust max_instances to take into account pending/running instances.
  set_fact:
    max_instances: "{{ ( region_max_instances | int ) - (  eif.instances | length ) }}"

- name: Check we have a valid Maximum ASG Node count setting
  set_fact:
    node_autoscaler_max: "{{ ( max_instances | int ) }}"
  when: node_autoscaler_max is not defined or node_autoscaler_max > max_instances or node_autoscaler_max < node_autoscaler_min

- debug:
    var: node_autoscaler_max

- name: Adding Cluster Autoscaller via Helm
  shell: >
    helm install --atomic --dep-up
    --name cluster-autoscaler
    --namespace kube-system
    --set autoDiscovery.clusterName="{{ cluster_name }}.{{ dns_zone }}"
    --set extraArgs.balance-similar-node-groups=true
    --set extraArgs.expander=least-waste
    --set extraArgs.scale-down-unneeded-time="{{ scale_down_unneeded_time }}"
    --set extraArgs.expendable-pods-priority-cutoff="{{ expendable_pods_priority_cutoff }}"
    --set awsRegion="{{ aws_region }}"
    --set rbac.create=true
    --set rbac.pspEnabled=true
    --set cloudProvider=aws
    --set nodes="{{ node_autoscaler_min }}:{{ node_autoscaler_max }}:nodes.{{ cluster_name }}.{{ dns_zone }}"
    stable/cluster-autoscaler
  args:
    executable: /bin/bash

#--set "autoscalingGroups[0].name=your-asg-name,autoscalingGroups[0].maxSize=10,autoscalingGroups[0].minSize=1"
