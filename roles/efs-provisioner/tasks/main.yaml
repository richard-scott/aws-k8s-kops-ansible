---
- name: "Collecing VPC subnets"
  ec2_vpc_subnet_info:
    filters:
      "tag:KubernetesCluster": "{{ cluster_name }}.{{ dns_zone }}"
      "tag:SubnetType": "Private"
  register: subnet_info

- ec2_group_info:
    filters:
      group-name: "nodes.{{ cluster_name }}.{{ dns_zone }}"
  register: ec2_security_groups

- set_fact:
    nodes_security_group: "{{ ec2_security_groups['security_groups'][0].group_id }}"

- name: Populating targets list
  set_fact:
    targets: "{{ targets | default([]) }} + {{ [ { 'subnet_id': item, 'security_groups': [ nodes_security_group ] } ] }}"
  loop: "{{ subnet_info.subnets|map(attribute='id')|list }}"

- name: Creating Elastic File System
  efs:
    state: present
    name: "{{ efs_name_tag }}"
    encrypt: yes
    #kms_key_id: "{{ kms_key_id }}"
    tags:
      Name: "{{ efs_name_tag }}"
    targets: "{{ targets }}"
  register: efs_state

- block:

  - file:
      path: "{{ role_path }}/files/external-storage/aws/efs/deploy/{{ item }}-{{ cluster_name }}.{{ dns_zone }}.yaml"
      state: absent
    loop: config_files_to_update

  - name: "Pull updates from https://github.com/kubernetes-incubator/external-storage.git"
    git:
      repo: https://github.com/kubernetes-incubator/external-storage.git
      dest: "{{ role_path }}/files/external-storage"
      update: yes
      version: master

  - name: "Copy 'manifest.yaml' -> 'manifest-{{ cluster_name }}.{{ dns_zone }}.yaml'"
    copy:
     src: "{{ role_path }}/files/external-storage/aws/efs/deploy/{{ item }}.yaml"
     dest: "{{ role_path }}/files/external-storage/aws/efs/deploy/{{ item }}-{{ cluster_name }}.{{ dns_zone }}.yaml"
    delegate_to: localhost
    loop: config_files_to_update

  - name: "Update manifest_search_and_replace dictionary element 'file.system.id' to {{ efs_state['efs'].file_system_id }}"
    set_fact:
      manifest_search_and_replace: "{{ manifest_search_and_replace|combine( { 'file.system.id': { 'replace': efs_state['efs'].file_system_id } }, recursive=True) }}"

  - name: "Update manifest_search_and_replace dictionary element 'aws.region' to {{ aws_region }}"
    set_fact:
      manifest_search_and_replace: "{{ manifest_search_and_replace|combine( { 'aws.region': { 'replace': aws_region } }, recursive=True) }}"

  - set_fact:
      new_server: "{{ manifest_search_and_replace['file.system.id']['replace'] }}.efs.{{ aws_region }}.amazonaws.com"

  - name: "Update manifest_search_and_replace dictionary element 'server' to {{ manifest_search_and_replace['file.system.id']['replace'] }}"
    set_fact:
      manifest_search_and_replace: "{{ manifest_search_and_replace|combine( { 'server': { 'replace': new_server } }, recursive=True) }}"

  - name: "Update manifest_search_and_replace dictionary element 'provisioner' to {{ manifest_search_and_replace['provisioner.name']['replace'] }}"
    set_fact:
      manifest_search_and_replace: "{{ manifest_search_and_replace|combine( { 'provisioner': { 'replace': manifest_search_and_replace['provisioner.name']['replace'] } }, recursive=True) }}"

  - name: Update "manifest-{{ cluster_name }}.{{ dns_zone }}.yaml" with our latest EFS settings
    replace:
      path: "{{ role_path }}/files/external-storage/aws/efs/deploy/manifest-{{ cluster_name }}.{{ dns_zone }}.yaml"
      regexp: '^(.*\s){{ item.key }}:\s{{ item.value.find | regex_escape() }}$'
      replace: '\1{{ item.key }}: {{ item.value.replace }}'
    loop: "{{ lookup('dict', manifest_search_and_replace, wantlist=True) }}"

  - name: Update "rbac-{{ cluster_name }}.{{ dns_zone }}.yaml" with our latest EFS settings
    replace:
      path: "{{ role_path }}/files/external-storage/aws/efs/deploy/rbac-{{ cluster_name }}.{{ dns_zone }}.yaml"
      regexp: '^(.*\s){{ item.key }}:\s{{ item.value.find | regex_escape() }}$'
      replace: '\1{{ item.key }}: {{ item.value.replace }}'
    loop: "{{ lookup('dict', rbac_search_and_replace, wantlist=True ) }}"

  - name: Apply yaml files
    shell: |
      kubectl apply -f {{ item }}-{{ cluster_name }}.{{ dns_zone }}.yaml
    args:
      executable: /bin/bash
      chdir: "{{ role_path }}/files/external-storage/aws/efs/deploy/"
    loop:
      - "{{ config_files_to_update }}"
      - "claim.yaml"

  when: efs_state.changed
