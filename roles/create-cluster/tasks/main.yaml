---

####################
# Create Kubernetes cluster using Kops
####################

- name: Configure topology variable
  set_fact:
    topology: "public"
  when: topology != "private"

- name: Configure api_loadbalancer_type  variable
  set_fact:
    api_loadbalancer_type: "public"
  when: api_loadbalancer_type != "private"

- block:
  - name: "Gathering facts about all availability zones in {{ aws_region }}"
    aws_az_facts:
      region: "{{ aws_region }}"
    register: aws_az_list

  - set_fact:
      aws_zones: "{{ lookup('flattened','{{ aws_az_list | json_query(query) }}') }}"
    vars:
      query: 'availability_zones[*].zone_name'
  when: aws_zones is undefined

- name: Configure master_zones variable.
  set_fact:
    master_zones: "{{ aws_zones }}"
  when: master_zones is undefined

- name: Count master_zones
  set_fact:
    master_zones_count: "{{  master_zones.split(',') | length | int }}"

- name: Configure master count based on zones
  set_fact: 
    master_count: "{{  master_zones.split(',') | length | int }}"
  when: master_count is undefined or master_count == "auto" or master_count < master_zones_count

- name: Configure node count variable
  set_fact: 
    node_count: "1"
  when: node_count is undefined or node_count == "auto"

- name: Create initial cluster configuration
  shell: |
    kops create cluster \
    --admin-access "{{ api_access_cidr | default('0.0.0.0/0') }}" \
    --api-loadbalancer-type "{{ api_loadbalancer_type }}" \
    --associate-public-ip=false \
    --cloud aws \
    --cloud-labels "k8s.io/cluster-autoscaler/{{ cluster_name }}=Active,k8s.io/cluster-autoscaler/enabled=True" \
    --dns-zone "{{ dns_zone }}" \
    --encrypt-etcd-storage \
    --image "{{ base_image }}" \
    --master-size "{{ master_size }}" \
    --master-zones "{{ master_zones }}" \
    --master-count "{{ master_count }}" \
    --name "{{ cluster_name }}" \
    --network-cidr "{{ network_cidr }}" \
    --networking "{{ kubernetes_networking }}" \
    --node-count "{{ node_count }}" \
    --node-size "{{ node_size }}" \
    --topology "{{ topology }}" \
    --ssh-public-key "{{ ssh_public_key }}" \
    --state "{{ state_store }}" \
    --ssh-access "{{ ssh_access_cidr | default('0.0.0.0/0') }}" \
    --zones "{{ aws_zones }}"

- name: Enable Kubelet options
  shell: "kops --name '{{ cluster_name }}' --state '{{ state_store }}' set cluster '{{ item.name }}'='{{ item.value }}'"
  environment:
    KOPS_FEATURE_FLAGS: SpecOverrideFlag
  with_items:
    - { 'name': 'spec.kubelet.authenticationTokenWebhook', 'value': 'true' }
    - { 'name': 'spec.kubelet.authorizationMode', 'value': 'Webhook' }

- include: ig_conf.yaml

- include: cluster_conf.yaml

- name: Create the physical cluster
  shell: "kops update cluster {{ cluster_name }} --yes --state {{ state_store }}"

- name: Export configuration for kubectl
  shell: "kops export kubecfg {{ cluster_name }} --state {{ state_store }}"

- name: Wait for all Kubernetes nodes to be available (This can take around 15 min to complete).
  shell: |
    kops --name "k8s.rs.brainomix.com" --state "s3://rs-k8s" validate cluster
  ignore_errors: true
  register: cmd_result
  until: cmd_result.rc == 0
  retries: 15
  delay: 60

- name: Install Kubernetes Dashboard
  shell: |
    kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/master/aio/deploy/recommended.yaml

- name: Add a Dashboard Admin user account
  shell: |
    kubectl apply -f {{ role_path }}/files/{{item}}.yaml
  with_items:
    - ServiceAccount
    - ClusterRoleBinding
