---

####################
# Create Kubernetes cluster using Kops
####################
- name: Configure topology variable
  set_fact:
    topology: "public"
  when: topology != "private"

- name: Configure api_loadbalancer_type  variable
  set_fact:
    api_loadbalancer_type: "public"
  when: api_loadbalancer_type != "private"

- block:
  - name: "Gathering facts about all availability zones in {{ aws_region }}"
    aws_az_facts:
      region: "{{ aws_region }}"
    register: aws_az_list

  - set_fact:
      aws_zones: "{{ lookup('flattened','{{ aws_az_list | json_query(query) }}') }}"
    vars:
      query: 'availability_zones[*].zone_name'
  when: aws_zones is undefined or aws_zones == "auto"

- name: Configure master_zones variable.
  set_fact:
    master_zones: "{{ aws_zones }}"
  when: master_zones is undefined or master_zones == "auto"

- name: Count master_zones
  set_fact:
    master_zones_count: "{{  master_zones.split(',') | length | int }}"

- name: Configure master count based on zones
  set_fact: 
    master_count: "{{  master_zones.split(',') | length | int }}"
  when: master_count is undefined or master_count == "auto" or master_count < master_zones_count

- name: Check we have an odd count of masters
  set_fact:
    master_count: "{{ master_count }} + 1"
  when: master_count | int is divisibleby 2

- name: Configure node count variable
  set_fact: 
    node_count: "1"
  when: node_count is undefined or node_count == "auto"

- name: Configure node count variable
  set_fact: 
    base_image_string: "--image {{ base_image }}"
  when: base_image is defined and base_image != "auto"

- name: Configure node sizeing
  set_fact: 
    node_size_string: "--node-size {{ node_size }}"
  when: node_size is defined and node_size != "auto"

- name: Configure master node sizeing
  set_fact: 
    master_size_string: "--master-size {{ master_size }}"
  when: master_size is defined and master_size != "auto"

- name: Configure VPC Network CIDR
  set_fact: 
    network_cidr_string: "--network-cidr {{ network_cidr }}" 
  when: network_cidr is defined and network_cidr != "auto"

- name: Configure K8S version to be installed
  set_fact: 
    k8s_version_string: "--kubernetes-version {{ k8s_version }}"
  when: k8s_version is defined and k8s_version != "auto"

- name: "Get a list of Elastic IP's in use"
  ec2_eip_facts:
    region: "{{ aws_region }}"
  register: regional_eip_addresses

- name: "See if we have enough capacity for our master nodes"
  set_fact:
    available_elastic_ips: "{{ lookup('flattened','{{ regional_eip_addresses | json_query(query) | length }}') | int - lookup('flattened','{{ regional_eip_addresses | json_query(query) | length }}') | int }}"
  vars:
    query: 'addresses[*]'

- block:
    - debug:
        var: available_elastic_ips
    - fail:
  when: available_elastic_ips < master_count

- name: Create initial cluster configuration
  shell: |
    kops create cluster \
    --admin-access "{{ api_access_cidr | join(',') | default('0.0.0.0/0') }}" \
    --api-loadbalancer-type "{{ api_loadbalancer_type }}" \
    --associate-public-ip=false \
    {{ base_image_string }} \
    --cloud aws \
    --cloud-labels "k8s.io/cluster-autoscaler/{{ cluster_name }}.{{ dns_zone }}=Active,k8s.io/cluster-autoscaler/enabled=True" \
    --dns-zone "{{ dns_zone }}" \
    --encrypt-etcd-storage \
    {{ master_size_string }} \
    --master-zones "{{ master_zones }}" \
    --master-count "{{ master_count }}" \
    --name "{{ cluster_name }}.{{ dns_zone }}" \
    {{ network_cidr_string }} \
    --networking "{{ kubernetes_networking }}" \
    {{ k8s_version_string }} \
    --node-count "{{ node_count }}" \
    {{ node_size_string }} \
    --topology "{{ topology }}" \
    --ssh-public-key "{{ ssh_public_key }}" \
    --state "{{ state_store }}" \
    --ssh-access "{{ ssh_access_cidr | join(',') | default('0.0.0.0/0') }}" \
    --zones "{{ aws_zones }}"
  args:
    executable: /bin/bash

- name: Enable Kubelet options
  shell: "kops --name '{{ cluster_name }}.{{ dns_zone }}' --state '{{ state_store }}' set cluster '{{ item.name }}'='{{ item.value }}'"
  args:
    executable: /bin/bash
  environment:
    KOPS_FEATURE_FLAGS: SpecOverrideFlag
  with_items:
    - { 'name': 'spec.kubelet.authenticationTokenWebhook', 'value': 'true' }
    - { 'name': 'spec.kubelet.authorizationMode', 'value': 'Webhook' }

- include: ig_conf.yaml

- include: cluster_conf.yaml

- name: Creating physical cluster.
  shell: "time kops update cluster {{ cluster_name }}.{{ dns_zone }} --yes --state {{ state_store }}"
  register: cmd_result 
  args:
    executable: /bin/bash

- debug:
    var: cmd_result

- name: Export configuration for kubectl
  shell: "kops export kubecfg {{ cluster_name }}.{{ dns_zone }} --state {{ state_store }}"
  args:
    executable: /bin/bash

- name: "Waiting for DNS to update on api.{{ cluster_name }}.{{ dns_zone }}"
  shell: |
    dig +short api.{{ cluster_name }}.{{ dns_zone }} | egrep -v "^$"
  args:
    executable: /bin/bash
  register: cmd_result
  until: cmd_result.rc == 0
  retries: 30
  delay: 60

- name: Wait for all Kubernetes nodes to be available (This can take around 15 min to complete).
  shell: |
    kops --name '{{ cluster_name }}.{{ dns_zone }}' --state '{{ state_store }}' validate cluster
  args:
    executable: /bin/bash
  ignore_errors: true
  register: cmd_result
  until: cmd_result.rc == 0
  retries: 30
  delay: 60
