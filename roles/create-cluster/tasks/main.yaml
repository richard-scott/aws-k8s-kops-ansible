---

####################
# Create Kubernetes cluster using Kops
####################
- block:
  - name: Find out the latest release version
    register: url_content
    uri:
      url: "https://github.com/kubernetes/kubernetes/releases/latest"
      return_content: yes

  - name: Configure k8s_version  variable
    set_fact:
      k8s_version: "{{ url_content['url'] | basename }}"

  when: k8s_version is undefined or k8s_version == "latest"

- name: Configure topology variable
  set_fact:
    topology: "public"
  when: topology != "private"

- name: Configure api_loadbalancer_type  variable
  set_fact:
    api_loadbalancer_type: "public"
  when: api_loadbalancer_type != "private"

- block:
  - name: "Gathering facts about all availability zones in {{ aws_region }}"
    aws_az_facts:
      region: "{{ aws_region }}"
    register: aws_az_list

  - set_fact:
      aws_zones: "{{ lookup('flattened','{{ aws_az_list | json_query(query) }}') }}"
    vars:
      query: 'availability_zones[*].zone_name'
  when: aws_zones is undefined or aws_zones == "auto"

- name: Configure master_zones variable.
  set_fact:
    master_zones: "{{ aws_zones }}"
  when: master_zones is undefined

- name: Count master_zones
  set_fact:
    master_zones_count: "{{  master_zones.split(',') | length | int }}"

- name: Configure master count based on zones
  set_fact: 
    master_count: "{{  master_zones.split(',') | length | int }}"
  when: master_count is undefined or master_count == "auto" or master_count < master_zones_count

- name: Check we have an enough masters
  set_fact:
    master_count: "{{ master_count | int }} + 1"
  when: master_count | int is divisibleby 2

- name: Configure node count variable
  set_fact: 
    node_count: "1"
  when: node_count is undefined or node_count == "auto"

- name: Configure node count variable
  set_fact: 
    base_image_string: "--image {{ base_image }}"
  when: base_image is defined and base_image | length > 1

- name: Create initial cluster configuration
  shell: |
    kops create cluster \
    --admin-access "{{ api_access_cidr | join(',') | default('0.0.0.0/0') }}" \
    --api-loadbalancer-type "{{ api_loadbalancer_type }}" \
    --associate-public-ip=false \
    {{ base_image_string }} \
    --cloud aws \
    --cloud-labels "k8s.io/cluster-autoscaler/{{ cluster_name }}.{{ dns_zone }}=Active,k8s.io/cluster-autoscaler/enabled=True" \
    --dns-zone "{{ dns_zone }}" \
    --encrypt-etcd-storage \
    --master-size "{{ master_size }}" \
    --master-zones "{{ master_zones }}" \
    --master-count "{{ master_count }}" \
    --name "{{ cluster_name }}.{{ dns_zone }}" \
    --network-cidr "{{ network_cidr }}" \
    --networking "{{ kubernetes_networking }}" \
    --kubernetes-version "{{ k8s_version }}" \
    --node-count "{{ node_count }}" \
    --node-size "{{ node_size }}" \
    --topology "{{ topology }}" \
    --ssh-public-key "{{ ssh_public_key }}" \
    --state "{{ state_store }}" \
    --ssh-access "{{ ssh_access_cidr | join(',') | default('0.0.0.0/0') }}" \
    --zones "{{ aws_zones }}"

- name: Enable Kubelet options
  shell: "kops --name '{{ cluster_name }}.{{ dns_zone }}' --state '{{ state_store }}' set cluster '{{ item.name }}'='{{ item.value }}'"
  environment:
    KOPS_FEATURE_FLAGS: SpecOverrideFlag
  with_items:
    - { 'name': 'spec.kubelet.authenticationTokenWebhook', 'value': 'true' }
    - { 'name': 'spec.kubelet.authorizationMode', 'value': 'Webhook' }

- include: ig_conf.yaml

- include: cluster_conf.yaml

- name: Create the physical cluster
  shell: "kops update cluster {{ cluster_name }}.{{ dns_zone }} --yes --state {{ state_store }}"

- name: Export configuration for kubectl
  shell: "kops export kubecfg {{ cluster_name }}.{{ dns_zone }} --state {{ state_store }}"

- name: "Waiting for DNS to update on {{ cluster_name }}.{{ dns_zone }}"
  set_fact:
    dig_result: "{{ lookup('dig', '{{ cluster_name }}.{{ dns_zone }}' ) | replace('NXDOMAIN','') }}"
  until: dig_result != ''
  retries: 30
  delay: 60

- debug:
    var: dig_result

- name: Wait for all Kubernetes nodes to be available (This can take around 15 min to complete).
  shell: |
    kops --name '{{ cluster_name }}.{{ dns_zone }}' --state '{{ state_store }}' validate cluster
  ignore_errors: true
  register: cmd_result
  until: cmd_result.rc == 0
  retries: 30
  delay: 60
