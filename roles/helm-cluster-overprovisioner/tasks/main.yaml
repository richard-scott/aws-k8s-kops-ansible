---

#####################################
# Install Cluster overprovisioner via helm
#####################################

- name: "Update role/nodes.{{ cluster_name }}.{{ dns_zone }}"
  iam_policy:
    iam_type: role
    iam_name: "nodes.{{ cluster_name }}.{{ dns_zone }}"
    policy_name: "ec2ClusterAutoscale"
    state: present
    policy_json: " {{ lookup( 'template', 'cluster-overprovisioner.json.j2') }}"

- name: Wait for policy to be applied.
  iam_role_facts:
    name: "nodes.{{ cluster_name }}.{{ dns_zone }}"
  register: result
  until: result.iam_roles[0].inline_policies | length > 1
  retries: 30
  delay: 60

- name: Set replica_count variable
  set_fact: 
    replica_count: 1
  when: replica_count is undefined or replica_count =="auto"

- name: Set utilisation_multiplier variable
  set_fact: 
    utilisation_multiplier: 0.50
  when: utilisation_multiplier is undefined or utilisation_multiplier =="auto"

- name: Set resources_limitss_cpu variable
  block: 
    - ec2_instance_facts:
        region: "{{ aws_region }}"
        filters:
          "tag:Name": "nodes.{{ cluster_name }}.{{ dns_zone }}"
      register: ec2if
 
    - set_fact:
        resources_limitss_cpu: "{{ ec2if.instances[0].cpu_options.core_count * ec2if.instances[0].cpu_options.threads_per_core * utilisation_multiplier }}"

  when: resources_limitss_cpu is undefined or resources_limitss_cpu =="auto"

- name: Adding Cluster overprovisioner via Helm
  shell: |
    helm install --atomic --dep-up --timeout=600 \
    --namespace kube-system \
    --name cluster-overprovisioner \
    --set deployments[0].name=node \
    --set deployments[0].replica_count="{{ replica_count }}" \
    --set deployments[0].resources.limits.cpu="{{ resources_limitss_cpu }}" \
    stable/cluster-overprovisioner
